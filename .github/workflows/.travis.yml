# This is a basic workflow to help you get started with Actions
language: cpp

name: travis

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the MASTER-TEST branch
on:
  change:
    branches: [ KODI ]
  push_request:
  pull_request:
    branches: [ KODI ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

compiler:
  - clang
  - gcc
# before_install: |
  - test -n $CC  && unset CC
  - test -n $CXX && unset CXX
    
    # Steps represent a sequence of tasks that will be executed as part of the job
  - script: run a script
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    uses: | 
           actions/checkout@v1
           actions/checkout@v2

    # Runs a single command using the runners shell
#   - name: Run a one-line script
#      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    name : Run a multi-line script
    run: |
        allow failures
            cd ~/ D:/
            mk dir ~/.gitconfig
            git config [--global]
            user: 
            user user.name $Travis
            user.email $Travis@namelessone.com
            color:
            color color.ui auto
            github github.user $Travis
            github.token $[token#]
            rm .git/index
            rm .github/index
            git index
            mk dir .git
            mk dir .github
            git add .git
            git add .github
            cd $TRAVIS_BUILD_DIR/..
            git clone --all https://github.com/I-Cat/mirros-xbmc.git
            git clone --all --depth=1 https://github.com/xbmc/xbmc.git
            git status
            git log
            git log --graph --pretty=oneline --abbrev-commit
            Jobs: |
               cd D:/ ${trusty} && mkdir build && cd build
               mkdir -p definition/${trusty}
               echo ${xbmc} $TRAVIS_BUILD_DIR $TRAVIS_COMMIT > definition/${trusty}/${xbmc}.txt
               cmake -DADDONS_TO_BUILD=${trusty} -DADDON_SRC_PREFIX=$TRAVIS_BUILD_DIR/.. -DADDONS_DEFINITION_DIR=$TRAVIS_BUILD_DIR/build/definition -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/../xbmc/ -DPACKAGE_ZIP=1 $TRAVIS_BUILD_DIR/../xbmc/cmake/addons

run: | 
    os: linux
    distro: trusty
    compiler: gcc
    language: cpp
    sudo: false
    cache:
    apt: true
    directories:
    - $HOME/cmake-3.3.2-Linux-x86_64/bin
    - $HOME/cmake-3.3.2-Linux-x86_64/share
    - $TRAVIS_BUILD_DIR/Submodules/CEF
    - $TRAVIS_BUILD_DIR/.git/modules/Submodules/CEF
git:
  submodules: 
addons:
  apt:
    packages: &linux_packages |
      - nodejs
env:
  global:
    - MAKEFLAGS=-j4
    - CXXFLAGS=-Wno-invalid-offsetof
notifications:
  email:
    on_success: change
    on_failure: always
  webhooks:
    urls: |
      - https://webhooks.gitter.im/e/60a219c48b9fe2dc0ac1
    on_success: always  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_tart: always    # options: [always|never|change] default: always
matrix:
  fast_finish: true
  include:
    - &Linux-64bit
      env: LINUX=1
      addons:
        apt:
          packages: &linux_packages_64bit
            - *linux_packages
            - libgtk-3-dev
            - libasound2-dev
            - libxrandr-dev
            - libgl1-mesa-dev
            - libglu1-mesa-dev
    - <<: *Linux-64bit
      compiler: clang
  exclude:
    # Broken due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71444
    - &MingW-64bit
      env: CMAKE_TOOLCHAIN_FILE=Build/CMake/Toolchains/MinGW.cmake CMAKE_SYSTEM_PROCESSOR=x86_64 ATOMIC_D3D9=1
      addons:
        apt:
          packages: |
            - *linux_packages
            - gcc-mingw-w64-x86-64
            - g++-mingw-w64-x86-64
            - binutils-mingw-w64-x86-64
      before_script: &mingw_workaround |
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/windows.h Windows.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/shobjidl.h ShObjIdl.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/strsafe.h Strsafe.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/psapi.h Psapi.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/sddl.h Sddl.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/accctrl.h AccCtrl.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/aclapi.h Aclapi.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/include/oleidl.h OleIdl.h
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/lib/libws2_32.a libWs2_32.a
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/lib/libiphlpapi.a libIphlpapi.a
        ln -s /usr/$CMAKE_SYSTEM_PROCESSOR-w64-mingw32/lib/libwldap32.a libWldap32.a
        export CFLAGS="-I`pwd` -L`pwd` $CFLAGS"
        export CXXFLAGS="-I`pwd` -L`pwd` $CXXFLAGS"
    - &MingW-32bit
      env: CMAKE_TOOLCHAIN_FILE=Build/CMake/Toolchains/MinGW.cmake CMAKE_SYSTEM_PROCESSOR=i686 ATOMIC_D3D9=1
      addons:
        apt:
          packages:
            - *linux_packages
            - gcc-mingw-w64-i686
            - g++-mingw-w64-i686
            - binutils-mingw-w64-i686
      before_script: *mingw_workaround
    # 32-bit builds break due to libgtk-3-dev:i386 failing to install.
    - &Linux-32bit
      addons:
        apt:
          packages:
            - *linux_packages
            - g++-multilib
            - libasound2-dev:i386
            - libxrandr-dev:i386
            - libgl1-mesa-dev:i386
            - libglu1-mesa-dev:i386
      env: LINUX=1 ATOMIC_64BIT=0 CFLAGS=-m32 CXXFLAGS=-m32
    - <<: *Linux-32bit
      compiler: clang
script: |
  # Update CMake to 3.3 (minimum required version)
  if [[ ! -f $HOME/cmake-3.3.2-Linux-x86_64/bin/cmake ]];
  then
      wget --no-check-certificate https://cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz -O $HOME/cmake.tar.gz && \
      tar xf $HOME/cmake.tar.gz -C $HOME && \
      rm $HOME/cmake.tar.gz
#  fi

  export PATH=$HOME/cmake-3.3.2-Linux-x86_64/bin:$PATH
  mkdir build
  cd build
  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} ..
  cmake --build .

        make
        make .zip
        Build
        fi
        
        echo Add other actions to build,
        echo test, and deploy your project.
        
        fi
        
        
        
        
#? enter, enter, enter*1,000,000
# - git check "locked repo reason"
#  - git blame < https://github.com/xbmc/xbmc.git >
#  Find: <repo/file lock-reasion?> ^^
# - git show <Team Kodi>
# - git grep <*.*\/[^*]> [/]
#  - git checkout <Team Kodi> </>
#  - git branch
#  - git checkout --branch master --depth=1 https://github.com/xbmc/xbmc.git
# - git merge --branch KODI 
#- git format-patch https://github.com/I-Cat/mirros-xbmc
# - git push [https://github.com/I-Cat/mirros-xbmc] [KODI]
# - git tag <0.1_k>
# - git commit -a
# - git checkout <new> <branch>
# <master>
# - git merge
# - git pull 
# - git config [--local]
# - git add .
# I-Cat <gitter messanger> https://webhooks.gitter.im/e/60a219c48b9fe2dc0ac1
#
